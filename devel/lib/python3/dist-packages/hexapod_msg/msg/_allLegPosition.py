# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hexapod_msg/allLegPosition.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import hexapod_msg.msg

class allLegPosition(genpy.Message):
  _md5sum = "edafd0829c6c7701af53a3a96fc11013"
  _type = "hexapod_msg/allLegPosition"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """hexapod_msg/footPosition position_LF
hexapod_msg/footPosition position_LM
hexapod_msg/footPosition position_LH
hexapod_msg/footPosition position_RF
hexapod_msg/footPosition position_RM
hexapod_msg/footPosition position_RH

================================================================================
MSG: hexapod_msg/footPosition
float64 x
float64 y
float64 z"""
  __slots__ = ['position_LF','position_LM','position_LH','position_RF','position_RM','position_RH']
  _slot_types = ['hexapod_msg/footPosition','hexapod_msg/footPosition','hexapod_msg/footPosition','hexapod_msg/footPosition','hexapod_msg/footPosition','hexapod_msg/footPosition']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_LF,position_LM,position_LH,position_RF,position_RM,position_RH

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(allLegPosition, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position_LF is None:
        self.position_LF = hexapod_msg.msg.footPosition()
      if self.position_LM is None:
        self.position_LM = hexapod_msg.msg.footPosition()
      if self.position_LH is None:
        self.position_LH = hexapod_msg.msg.footPosition()
      if self.position_RF is None:
        self.position_RF = hexapod_msg.msg.footPosition()
      if self.position_RM is None:
        self.position_RM = hexapod_msg.msg.footPosition()
      if self.position_RH is None:
        self.position_RH = hexapod_msg.msg.footPosition()
    else:
      self.position_LF = hexapod_msg.msg.footPosition()
      self.position_LM = hexapod_msg.msg.footPosition()
      self.position_LH = hexapod_msg.msg.footPosition()
      self.position_RF = hexapod_msg.msg.footPosition()
      self.position_RM = hexapod_msg.msg.footPosition()
      self.position_RH = hexapod_msg.msg.footPosition()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.position_LF.x, _x.position_LF.y, _x.position_LF.z, _x.position_LM.x, _x.position_LM.y, _x.position_LM.z, _x.position_LH.x, _x.position_LH.y, _x.position_LH.z, _x.position_RF.x, _x.position_RF.y, _x.position_RF.z, _x.position_RM.x, _x.position_RM.y, _x.position_RM.z, _x.position_RH.x, _x.position_RH.y, _x.position_RH.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_LF is None:
        self.position_LF = hexapod_msg.msg.footPosition()
      if self.position_LM is None:
        self.position_LM = hexapod_msg.msg.footPosition()
      if self.position_LH is None:
        self.position_LH = hexapod_msg.msg.footPosition()
      if self.position_RF is None:
        self.position_RF = hexapod_msg.msg.footPosition()
      if self.position_RM is None:
        self.position_RM = hexapod_msg.msg.footPosition()
      if self.position_RH is None:
        self.position_RH = hexapod_msg.msg.footPosition()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.position_LF.x, _x.position_LF.y, _x.position_LF.z, _x.position_LM.x, _x.position_LM.y, _x.position_LM.z, _x.position_LH.x, _x.position_LH.y, _x.position_LH.z, _x.position_RF.x, _x.position_RF.y, _x.position_RF.z, _x.position_RM.x, _x.position_RM.y, _x.position_RM.z, _x.position_RH.x, _x.position_RH.y, _x.position_RH.z,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18d().pack(_x.position_LF.x, _x.position_LF.y, _x.position_LF.z, _x.position_LM.x, _x.position_LM.y, _x.position_LM.z, _x.position_LH.x, _x.position_LH.y, _x.position_LH.z, _x.position_RF.x, _x.position_RF.y, _x.position_RF.z, _x.position_RM.x, _x.position_RM.y, _x.position_RM.z, _x.position_RH.x, _x.position_RH.y, _x.position_RH.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position_LF is None:
        self.position_LF = hexapod_msg.msg.footPosition()
      if self.position_LM is None:
        self.position_LM = hexapod_msg.msg.footPosition()
      if self.position_LH is None:
        self.position_LH = hexapod_msg.msg.footPosition()
      if self.position_RF is None:
        self.position_RF = hexapod_msg.msg.footPosition()
      if self.position_RM is None:
        self.position_RM = hexapod_msg.msg.footPosition()
      if self.position_RH is None:
        self.position_RH = hexapod_msg.msg.footPosition()
      end = 0
      _x = self
      start = end
      end += 144
      (_x.position_LF.x, _x.position_LF.y, _x.position_LF.z, _x.position_LM.x, _x.position_LM.y, _x.position_LM.z, _x.position_LH.x, _x.position_LH.y, _x.position_LH.z, _x.position_RF.x, _x.position_RF.y, _x.position_RF.z, _x.position_RM.x, _x.position_RM.y, _x.position_RM.z, _x.position_RH.x, _x.position_RH.y, _x.position_RH.z,) = _get_struct_18d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18d = None
def _get_struct_18d():
    global _struct_18d
    if _struct_18d is None:
        _struct_18d = struct.Struct("<18d")
    return _struct_18d
