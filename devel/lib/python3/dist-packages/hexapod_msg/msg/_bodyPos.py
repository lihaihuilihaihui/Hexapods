# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hexapod_msg/bodyPos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class bodyPos(genpy.Message):
  _md5sum = "167df86e3204d5ea278732d95064ab3b"
  _type = "hexapod_msg/bodyPos"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64 posX
float64 posY
float64 posZ
float64 pitch
float64 roll
float64 yaw
float64 body_posX
float64 body_posY
float64 body_posZ"""
  __slots__ = ['posX','posY','posZ','pitch','roll','yaw','body_posX','body_posY','body_posZ']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       posX,posY,posZ,pitch,roll,yaw,body_posX,body_posY,body_posZ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(bodyPos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.posX is None:
        self.posX = 0.
      if self.posY is None:
        self.posY = 0.
      if self.posZ is None:
        self.posZ = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.body_posX is None:
        self.body_posX = 0.
      if self.body_posY is None:
        self.body_posY = 0.
      if self.body_posZ is None:
        self.body_posZ = 0.
    else:
      self.posX = 0.
      self.posY = 0.
      self.posZ = 0.
      self.pitch = 0.
      self.roll = 0.
      self.yaw = 0.
      self.body_posX = 0.
      self.body_posY = 0.
      self.body_posZ = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.posX, _x.posY, _x.posZ, _x.pitch, _x.roll, _x.yaw, _x.body_posX, _x.body_posY, _x.body_posZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.posX, _x.posY, _x.posZ, _x.pitch, _x.roll, _x.yaw, _x.body_posX, _x.body_posY, _x.body_posZ,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9d().pack(_x.posX, _x.posY, _x.posZ, _x.pitch, _x.roll, _x.yaw, _x.body_posX, _x.body_posY, _x.body_posZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 72
      (_x.posX, _x.posY, _x.posZ, _x.pitch, _x.roll, _x.yaw, _x.body_posX, _x.body_posY, _x.body_posZ,) = _get_struct_9d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
