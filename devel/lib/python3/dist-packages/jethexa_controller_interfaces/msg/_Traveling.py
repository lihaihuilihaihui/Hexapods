# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from jethexa_controller_interfaces/Traveling.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Traveling(genpy.Message):
  _md5sum = "6fc5a17f1d10ed31886179c4c279d006"
  _type = "jethexa_controller_interfaces/Traveling"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int8 gait
float32 stride
float32 height
float32 direction
float32 rotation
float32 time
uint32 steps
bool relative_height
bool interrupt"""
  __slots__ = ['gait','stride','height','direction','rotation','time','steps','relative_height','interrupt']
  _slot_types = ['int8','float32','float32','float32','float32','float32','uint32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       gait,stride,height,direction,rotation,time,steps,relative_height,interrupt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Traveling, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.gait is None:
        self.gait = 0
      if self.stride is None:
        self.stride = 0.
      if self.height is None:
        self.height = 0.
      if self.direction is None:
        self.direction = 0.
      if self.rotation is None:
        self.rotation = 0.
      if self.time is None:
        self.time = 0.
      if self.steps is None:
        self.steps = 0
      if self.relative_height is None:
        self.relative_height = False
      if self.interrupt is None:
        self.interrupt = False
    else:
      self.gait = 0
      self.stride = 0.
      self.height = 0.
      self.direction = 0.
      self.rotation = 0.
      self.time = 0.
      self.steps = 0
      self.relative_height = False
      self.interrupt = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b5fI2B().pack(_x.gait, _x.stride, _x.height, _x.direction, _x.rotation, _x.time, _x.steps, _x.relative_height, _x.interrupt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.gait, _x.stride, _x.height, _x.direction, _x.rotation, _x.time, _x.steps, _x.relative_height, _x.interrupt,) = _get_struct_b5fI2B().unpack(str[start:end])
      self.relative_height = bool(self.relative_height)
      self.interrupt = bool(self.interrupt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b5fI2B().pack(_x.gait, _x.stride, _x.height, _x.direction, _x.rotation, _x.time, _x.steps, _x.relative_height, _x.interrupt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.gait, _x.stride, _x.height, _x.direction, _x.rotation, _x.time, _x.steps, _x.relative_height, _x.interrupt,) = _get_struct_b5fI2B().unpack(str[start:end])
      self.relative_height = bool(self.relative_height)
      self.interrupt = bool(self.interrupt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b5fI2B = None
def _get_struct_b5fI2B():
    global _struct_b5fI2B
    if _struct_b5fI2B is None:
        _struct_b5fI2B = struct.Struct("<b5fI2B")
    return _struct_b5fI2B
