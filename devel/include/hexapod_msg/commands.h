// Generated by gencpp from file hexapod_msg/commands.msg
// DO NOT EDIT!


#ifndef HEXAPOD_MSG_MESSAGE_COMMANDS_H
#define HEXAPOD_MSG_MESSAGE_COMMANDS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapod_msg
{
template <class ContainerAllocator>
struct commands_
{
  typedef commands_<ContainerAllocator> Type;

  commands_()
    : gaitFlag(0.0)
    , gaitCycle(0.0)
    , strideX(0.0)
    , strideY(0.0)
    , posX(0.0)
    , posY(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , bodyHeight(0.0)
    , stepHeight(0.0)  {
    }
  commands_(const ContainerAllocator& _alloc)
    : gaitFlag(0.0)
    , gaitCycle(0.0)
    , strideX(0.0)
    , strideY(0.0)
    , posX(0.0)
    , posY(0.0)
    , yaw(0.0)
    , pitch(0.0)
    , roll(0.0)
    , bodyHeight(0.0)
    , stepHeight(0.0)  {
  (void)_alloc;
    }



   typedef double _gaitFlag_type;
  _gaitFlag_type gaitFlag;

   typedef double _gaitCycle_type;
  _gaitCycle_type gaitCycle;

   typedef double _strideX_type;
  _strideX_type strideX;

   typedef double _strideY_type;
  _strideY_type strideY;

   typedef double _posX_type;
  _posX_type posX;

   typedef double _posY_type;
  _posY_type posY;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _bodyHeight_type;
  _bodyHeight_type bodyHeight;

   typedef double _stepHeight_type;
  _stepHeight_type stepHeight;





  typedef boost::shared_ptr< ::hexapod_msg::commands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_msg::commands_<ContainerAllocator> const> ConstPtr;

}; // struct commands_

typedef ::hexapod_msg::commands_<std::allocator<void> > commands;

typedef boost::shared_ptr< ::hexapod_msg::commands > commandsPtr;
typedef boost::shared_ptr< ::hexapod_msg::commands const> commandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_msg::commands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_msg::commands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_msg::commands_<ContainerAllocator1> & lhs, const ::hexapod_msg::commands_<ContainerAllocator2> & rhs)
{
  return lhs.gaitFlag == rhs.gaitFlag &&
    lhs.gaitCycle == rhs.gaitCycle &&
    lhs.strideX == rhs.strideX &&
    lhs.strideY == rhs.strideY &&
    lhs.posX == rhs.posX &&
    lhs.posY == rhs.posY &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.bodyHeight == rhs.bodyHeight &&
    lhs.stepHeight == rhs.stepHeight;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_msg::commands_<ContainerAllocator1> & lhs, const ::hexapod_msg::commands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::commands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::commands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::commands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::commands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_msg::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1cf61961f72659f1f2317cb2c8fc565b";
  }

  static const char* value(const ::hexapod_msg::commands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1cf61961f72659f1ULL;
  static const uint64_t static_value2 = 0xf2317cb2c8fc565bULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_msg::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msg/commands";
  }

  static const char* value(const ::hexapod_msg::commands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_msg::commands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gaitFlag #2-二步态 3-三步态 6-六步态 20-侧向二步态 30-侧向三步态 60-侧向六步态 7-手动步态 8-原地转向 9-自由 10-爬坡 11-越障 12-过沟 13-涉水 14-侧倾\n"
"float64 gaitCycle\n"
"float64 strideX\n"
"float64 strideY\n"
"float64 posX\n"
"float64 posY\n"
"float64 yaw\n"
"float64 pitch\n"
"float64 roll\n"
"float64 bodyHeight\n"
"float64 stepHeight\n"
"\n"
;
  }

  static const char* value(const ::hexapod_msg::commands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_msg::commands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gaitFlag);
      stream.next(m.gaitCycle);
      stream.next(m.strideX);
      stream.next(m.strideY);
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.bodyHeight);
      stream.next(m.stepHeight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct commands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_msg::commands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_msg::commands_<ContainerAllocator>& v)
  {
    s << indent << "gaitFlag: ";
    Printer<double>::stream(s, indent + "  ", v.gaitFlag);
    s << indent << "gaitCycle: ";
    Printer<double>::stream(s, indent + "  ", v.gaitCycle);
    s << indent << "strideX: ";
    Printer<double>::stream(s, indent + "  ", v.strideX);
    s << indent << "strideY: ";
    Printer<double>::stream(s, indent + "  ", v.strideY);
    s << indent << "posX: ";
    Printer<double>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<double>::stream(s, indent + "  ", v.posY);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "bodyHeight: ";
    Printer<double>::stream(s, indent + "  ", v.bodyHeight);
    s << indent << "stepHeight: ";
    Printer<double>::stream(s, indent + "  ", v.stepHeight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_MSG_MESSAGE_COMMANDS_H
