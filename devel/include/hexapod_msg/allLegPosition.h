// Generated by gencpp from file hexapod_msg/allLegPosition.msg
// DO NOT EDIT!


#ifndef HEXAPOD_MSG_MESSAGE_ALLLEGPOSITION_H
#define HEXAPOD_MSG_MESSAGE_ALLLEGPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <hexapod_msg/footPosition.h>
#include <hexapod_msg/footPosition.h>
#include <hexapod_msg/footPosition.h>
#include <hexapod_msg/footPosition.h>
#include <hexapod_msg/footPosition.h>
#include <hexapod_msg/footPosition.h>

namespace hexapod_msg
{
template <class ContainerAllocator>
struct allLegPosition_
{
  typedef allLegPosition_<ContainerAllocator> Type;

  allLegPosition_()
    : position_LF()
    , position_LM()
    , position_LH()
    , position_RF()
    , position_RM()
    , position_RH()  {
    }
  allLegPosition_(const ContainerAllocator& _alloc)
    : position_LF(_alloc)
    , position_LM(_alloc)
    , position_LH(_alloc)
    , position_RF(_alloc)
    , position_RM(_alloc)
    , position_RH(_alloc)  {
  (void)_alloc;
    }



   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_LF_type;
  _position_LF_type position_LF;

   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_LM_type;
  _position_LM_type position_LM;

   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_LH_type;
  _position_LH_type position_LH;

   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_RF_type;
  _position_RF_type position_RF;

   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_RM_type;
  _position_RM_type position_RM;

   typedef  ::hexapod_msg::footPosition_<ContainerAllocator>  _position_RH_type;
  _position_RH_type position_RH;





  typedef boost::shared_ptr< ::hexapod_msg::allLegPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_msg::allLegPosition_<ContainerAllocator> const> ConstPtr;

}; // struct allLegPosition_

typedef ::hexapod_msg::allLegPosition_<std::allocator<void> > allLegPosition;

typedef boost::shared_ptr< ::hexapod_msg::allLegPosition > allLegPositionPtr;
typedef boost::shared_ptr< ::hexapod_msg::allLegPosition const> allLegPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_msg::allLegPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_msg::allLegPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_msg::allLegPosition_<ContainerAllocator1> & lhs, const ::hexapod_msg::allLegPosition_<ContainerAllocator2> & rhs)
{
  return lhs.position_LF == rhs.position_LF &&
    lhs.position_LM == rhs.position_LM &&
    lhs.position_LH == rhs.position_LH &&
    lhs.position_RF == rhs.position_RF &&
    lhs.position_RM == rhs.position_RM &&
    lhs.position_RH == rhs.position_RH;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_msg::allLegPosition_<ContainerAllocator1> & lhs, const ::hexapod_msg::allLegPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::allLegPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::allLegPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::allLegPosition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edafd0829c6c7701af53a3a96fc11013";
  }

  static const char* value(const ::hexapod_msg::allLegPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedafd0829c6c7701ULL;
  static const uint64_t static_value2 = 0xaf53a3a96fc11013ULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msg/allLegPosition";
  }

  static const char* value(const ::hexapod_msg::allLegPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msg/footPosition position_LF\n"
"hexapod_msg/footPosition position_LM\n"
"hexapod_msg/footPosition position_LH\n"
"hexapod_msg/footPosition position_RF\n"
"hexapod_msg/footPosition position_RM\n"
"hexapod_msg/footPosition position_RH\n"
"\n"
"================================================================================\n"
"MSG: hexapod_msg/footPosition\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::hexapod_msg::allLegPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_LF);
      stream.next(m.position_LM);
      stream.next(m.position_LH);
      stream.next(m.position_RF);
      stream.next(m.position_RM);
      stream.next(m.position_RH);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct allLegPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_msg::allLegPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_msg::allLegPosition_<ContainerAllocator>& v)
  {
    s << indent << "position_LF: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_LF);
    s << indent << "position_LM: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_LM);
    s << indent << "position_LH: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_LH);
    s << indent << "position_RF: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_RF);
    s << indent << "position_RM: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_RM);
    s << indent << "position_RH: ";
    s << std::endl;
    Printer< ::hexapod_msg::footPosition_<ContainerAllocator> >::stream(s, indent + "  ", v.position_RH);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_MSG_MESSAGE_ALLLEGPOSITION_H
