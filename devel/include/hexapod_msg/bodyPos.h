// Generated by gencpp from file hexapod_msg/bodyPos.msg
// DO NOT EDIT!


#ifndef HEXAPOD_MSG_MESSAGE_BODYPOS_H
#define HEXAPOD_MSG_MESSAGE_BODYPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapod_msg
{
template <class ContainerAllocator>
struct bodyPos_
{
  typedef bodyPos_<ContainerAllocator> Type;

  bodyPos_()
    : posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , body_posX(0.0)
    , body_posY(0.0)
    , body_posZ(0.0)  {
    }
  bodyPos_(const ContainerAllocator& _alloc)
    : posX(0.0)
    , posY(0.0)
    , posZ(0.0)
    , pitch(0.0)
    , roll(0.0)
    , yaw(0.0)
    , body_posX(0.0)
    , body_posY(0.0)
    , body_posZ(0.0)  {
  (void)_alloc;
    }



   typedef double _posX_type;
  _posX_type posX;

   typedef double _posY_type;
  _posY_type posY;

   typedef double _posZ_type;
  _posZ_type posZ;

   typedef double _pitch_type;
  _pitch_type pitch;

   typedef double _roll_type;
  _roll_type roll;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _body_posX_type;
  _body_posX_type body_posX;

   typedef double _body_posY_type;
  _body_posY_type body_posY;

   typedef double _body_posZ_type;
  _body_posZ_type body_posZ;





  typedef boost::shared_ptr< ::hexapod_msg::bodyPos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_msg::bodyPos_<ContainerAllocator> const> ConstPtr;

}; // struct bodyPos_

typedef ::hexapod_msg::bodyPos_<std::allocator<void> > bodyPos;

typedef boost::shared_ptr< ::hexapod_msg::bodyPos > bodyPosPtr;
typedef boost::shared_ptr< ::hexapod_msg::bodyPos const> bodyPosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_msg::bodyPos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_msg::bodyPos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_msg::bodyPos_<ContainerAllocator1> & lhs, const ::hexapod_msg::bodyPos_<ContainerAllocator2> & rhs)
{
  return lhs.posX == rhs.posX &&
    lhs.posY == rhs.posY &&
    lhs.posZ == rhs.posZ &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll &&
    lhs.yaw == rhs.yaw &&
    lhs.body_posX == rhs.body_posX &&
    lhs.body_posY == rhs.body_posY &&
    lhs.body_posZ == rhs.body_posZ;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_msg::bodyPos_<ContainerAllocator1> & lhs, const ::hexapod_msg::bodyPos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::bodyPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::bodyPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::bodyPos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::bodyPos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::bodyPos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::bodyPos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_msg::bodyPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "167df86e3204d5ea278732d95064ab3b";
  }

  static const char* value(const ::hexapod_msg::bodyPos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x167df86e3204d5eaULL;
  static const uint64_t static_value2 = 0x278732d95064ab3bULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_msg::bodyPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msg/bodyPos";
  }

  static const char* value(const ::hexapod_msg::bodyPos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_msg::bodyPos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 posX\n"
"float64 posY\n"
"float64 posZ\n"
"float64 pitch\n"
"float64 roll\n"
"float64 yaw\n"
"float64 body_posX\n"
"float64 body_posY\n"
"float64 body_posZ\n"
;
  }

  static const char* value(const ::hexapod_msg::bodyPos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_msg::bodyPos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.posZ);
      stream.next(m.pitch);
      stream.next(m.roll);
      stream.next(m.yaw);
      stream.next(m.body_posX);
      stream.next(m.body_posY);
      stream.next(m.body_posZ);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bodyPos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_msg::bodyPos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_msg::bodyPos_<ContainerAllocator>& v)
  {
    s << indent << "posX: ";
    Printer<double>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<double>::stream(s, indent + "  ", v.posY);
    s << indent << "posZ: ";
    Printer<double>::stream(s, indent + "  ", v.posZ);
    s << indent << "pitch: ";
    Printer<double>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<double>::stream(s, indent + "  ", v.roll);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "body_posX: ";
    Printer<double>::stream(s, indent + "  ", v.body_posX);
    s << indent << "body_posY: ";
    Printer<double>::stream(s, indent + "  ", v.body_posY);
    s << indent << "body_posZ: ";
    Printer<double>::stream(s, indent + "  ", v.body_posZ);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_MSG_MESSAGE_BODYPOS_H
