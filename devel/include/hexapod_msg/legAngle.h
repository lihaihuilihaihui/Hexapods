// Generated by gencpp from file hexapod_msg/legAngle.msg
// DO NOT EDIT!


#ifndef HEXAPOD_MSG_MESSAGE_LEGANGLE_H
#define HEXAPOD_MSG_MESSAGE_LEGANGLE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapod_msg
{
template <class ContainerAllocator>
struct legAngle_
{
  typedef legAngle_<ContainerAllocator> Type;

  legAngle_()
    : Angle1(0.0)
    , Angle2(0.0)
    , Angle3(0.0)  {
    }
  legAngle_(const ContainerAllocator& _alloc)
    : Angle1(0.0)
    , Angle2(0.0)
    , Angle3(0.0)  {
  (void)_alloc;
    }



   typedef double _Angle1_type;
  _Angle1_type Angle1;

   typedef double _Angle2_type;
  _Angle2_type Angle2;

   typedef double _Angle3_type;
  _Angle3_type Angle3;





  typedef boost::shared_ptr< ::hexapod_msg::legAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapod_msg::legAngle_<ContainerAllocator> const> ConstPtr;

}; // struct legAngle_

typedef ::hexapod_msg::legAngle_<std::allocator<void> > legAngle;

typedef boost::shared_ptr< ::hexapod_msg::legAngle > legAnglePtr;
typedef boost::shared_ptr< ::hexapod_msg::legAngle const> legAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapod_msg::legAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapod_msg::legAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hexapod_msg::legAngle_<ContainerAllocator1> & lhs, const ::hexapod_msg::legAngle_<ContainerAllocator2> & rhs)
{
  return lhs.Angle1 == rhs.Angle1 &&
    lhs.Angle2 == rhs.Angle2 &&
    lhs.Angle3 == rhs.Angle3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hexapod_msg::legAngle_<ContainerAllocator1> & lhs, const ::hexapod_msg::legAngle_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hexapod_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::legAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapod_msg::legAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::legAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapod_msg::legAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::legAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapod_msg::legAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapod_msg::legAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c136d8648a895dda5df63c2c29230290";
  }

  static const char* value(const ::hexapod_msg::legAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc136d8648a895ddaULL;
  static const uint64_t static_value2 = 0x5df63c2c29230290ULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapod_msg::legAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapod_msg/legAngle";
  }

  static const char* value(const ::hexapod_msg::legAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapod_msg::legAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Angle1\n"
"float64 Angle2\n"
"float64 Angle3\n"
;
  }

  static const char* value(const ::hexapod_msg::legAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapod_msg::legAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Angle1);
      stream.next(m.Angle2);
      stream.next(m.Angle3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct legAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapod_msg::legAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapod_msg::legAngle_<ContainerAllocator>& v)
  {
    s << indent << "Angle1: ";
    Printer<double>::stream(s, indent + "  ", v.Angle1);
    s << indent << "Angle2: ";
    Printer<double>::stream(s, indent + "  ", v.Angle2);
    s << indent << "Angle3: ";
    Printer<double>::stream(s, indent + "  ", v.Angle3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPOD_MSG_MESSAGE_LEGANGLE_H
