// Generated by gencpp from file jethexa_controller_interfaces/PoseTransformRequest.msg
// DO NOT EDIT!


#ifndef JETHEXA_CONTROLLER_INTERFACES_MESSAGE_POSETRANSFORMREQUEST_H
#define JETHEXA_CONTROLLER_INTERFACES_MESSAGE_POSETRANSFORMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace jethexa_controller_interfaces
{
template <class ContainerAllocator>
struct PoseTransformRequest_
{
  typedef PoseTransformRequest_<ContainerAllocator> Type;

  PoseTransformRequest_()
    : transform()
    , duration(0.0)
    , interrupt(false)  {
    }
  PoseTransformRequest_(const ContainerAllocator& _alloc)
    : transform(_alloc)
    , duration(0.0)
    , interrupt(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _interrupt_type;
  _interrupt_type interrupt;





  typedef boost::shared_ptr< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PoseTransformRequest_

typedef ::jethexa_controller_interfaces::PoseTransformRequest_<std::allocator<void> > PoseTransformRequest;

typedef boost::shared_ptr< ::jethexa_controller_interfaces::PoseTransformRequest > PoseTransformRequestPtr;
typedef boost::shared_ptr< ::jethexa_controller_interfaces::PoseTransformRequest const> PoseTransformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator2> & rhs)
{
  return lhs.transform == rhs.transform &&
    lhs.duration == rhs.duration &&
    lhs.interrupt == rhs.interrupt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jethexa_controller_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e56b69fe3e0752fee26148a691a534b";
  }

  static const char* value(const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e56b69fe3e0752fULL;
  static const uint64_t static_value2 = 0xee26148a691a534bULL;
};

template<class ContainerAllocator>
struct DataType< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jethexa_controller_interfaces/PoseTransformRequest";
  }

  static const char* value(const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Transform transform\n"
"float32 duration\n"
"bool interrupt\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transform);
      stream.next(m.duration);
      stream.next(m.interrupt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PoseTransformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jethexa_controller_interfaces::PoseTransformRequest_<ContainerAllocator>& v)
  {
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "interrupt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interrupt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETHEXA_CONTROLLER_INTERFACES_MESSAGE_POSETRANSFORMREQUEST_H
