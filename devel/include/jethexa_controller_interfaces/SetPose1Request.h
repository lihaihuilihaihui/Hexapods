// Generated by gencpp from file jethexa_controller_interfaces/SetPose1Request.msg
// DO NOT EDIT!


#ifndef JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETPOSE1REQUEST_H
#define JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETPOSE1REQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jethexa_controller_interfaces
{
template <class ContainerAllocator>
struct SetPose1Request_
{
  typedef SetPose1Request_<ContainerAllocator> Type;

  SetPose1Request_()
    : pose()
    , duration(0.0)
    , interrupt(false)  {
    }
  SetPose1Request_(const ContainerAllocator& _alloc)
    : pose(_alloc)
    , duration(0.0)
    , interrupt(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _pose_type;
  _pose_type pose;

   typedef float _duration_type;
  _duration_type duration;

   typedef uint8_t _interrupt_type;
  _interrupt_type interrupt;





  typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> const> ConstPtr;

}; // struct SetPose1Request_

typedef ::jethexa_controller_interfaces::SetPose1Request_<std::allocator<void> > SetPose1Request;

typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetPose1Request > SetPose1RequestPtr;
typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetPose1Request const> SetPose1RequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator2> & rhs)
{
  return lhs.pose == rhs.pose &&
    lhs.duration == rhs.duration &&
    lhs.interrupt == rhs.interrupt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jethexa_controller_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7e5fe49e2e45c23da9d2a553fa85a81";
  }

  static const char* value(const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7e5fe49e2e45c23ULL;
  static const uint64_t static_value2 = 0xda9d2a553fa85a81ULL;
};

template<class ContainerAllocator>
struct DataType< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jethexa_controller_interfaces/SetPose1Request";
  }

  static const char* value(const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string pose\n"
"float32 duration\n"
"bool interrupt\n"
;
  }

  static const char* value(const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pose);
      stream.next(m.duration);
      stream.next(m.interrupt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetPose1Request_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jethexa_controller_interfaces::SetPose1Request_<ContainerAllocator>& v)
  {
    s << indent << "pose: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.pose);
    s << indent << "duration: ";
    Printer<float>::stream(s, indent + "  ", v.duration);
    s << indent << "interrupt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interrupt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETPOSE1REQUEST_H
