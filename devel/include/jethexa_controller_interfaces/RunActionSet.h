// Generated by gencpp from file jethexa_controller_interfaces/RunActionSet.msg
// DO NOT EDIT!


#ifndef JETHEXA_CONTROLLER_INTERFACES_MESSAGE_RUNACTIONSET_H
#define JETHEXA_CONTROLLER_INTERFACES_MESSAGE_RUNACTIONSET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jethexa_controller_interfaces
{
template <class ContainerAllocator>
struct RunActionSet_
{
  typedef RunActionSet_<ContainerAllocator> Type;

  RunActionSet_()
    : action_path()
    , repeat(0)
    , interrupt(false)
    , default_path(false)  {
    }
  RunActionSet_(const ContainerAllocator& _alloc)
    : action_path(_alloc)
    , repeat(0)
    , interrupt(false)
    , default_path(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_path_type;
  _action_path_type action_path;

   typedef int32_t _repeat_type;
  _repeat_type repeat;

   typedef uint8_t _interrupt_type;
  _interrupt_type interrupt;

   typedef uint8_t _default_path_type;
  _default_path_type default_path;





  typedef boost::shared_ptr< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> const> ConstPtr;

}; // struct RunActionSet_

typedef ::jethexa_controller_interfaces::RunActionSet_<std::allocator<void> > RunActionSet;

typedef boost::shared_ptr< ::jethexa_controller_interfaces::RunActionSet > RunActionSetPtr;
typedef boost::shared_ptr< ::jethexa_controller_interfaces::RunActionSet const> RunActionSetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator2> & rhs)
{
  return lhs.action_path == rhs.action_path &&
    lhs.repeat == rhs.repeat &&
    lhs.interrupt == rhs.interrupt &&
    lhs.default_path == rhs.default_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jethexa_controller_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0956453a105a32316a59c54fb351ae16";
  }

  static const char* value(const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0956453a105a3231ULL;
  static const uint64_t static_value2 = 0x6a59c54fb351ae16ULL;
};

template<class ContainerAllocator>
struct DataType< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jethexa_controller_interfaces/RunActionSet";
  }

  static const char* value(const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request\n"
"string action_path\n"
"int32 repeat\n"
"bool interrupt\n"
"bool default_path\n"
;
  }

  static const char* value(const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_path);
      stream.next(m.repeat);
      stream.next(m.interrupt);
      stream.next(m.default_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RunActionSet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jethexa_controller_interfaces::RunActionSet_<ContainerAllocator>& v)
  {
    s << indent << "action_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action_path);
    s << indent << "repeat: ";
    Printer<int32_t>::stream(s, indent + "  ", v.repeat);
    s << indent << "interrupt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.interrupt);
    s << indent << "default_path: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.default_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETHEXA_CONTROLLER_INTERFACES_MESSAGE_RUNACTIONSET_H
