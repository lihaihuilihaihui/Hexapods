// Generated by gencpp from file jethexa_controller_interfaces/SetHead.msg
// DO NOT EDIT!


#ifndef JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETHEAD_H
#define JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETHEAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <jethexa_controller_interfaces/Euler.h>

namespace jethexa_controller_interfaces
{
template <class ContainerAllocator>
struct SetHead_
{
  typedef SetHead_<ContainerAllocator> Type;

  SetHead_()
    : rpy()
    , duration(0.0)  {
    }
  SetHead_(const ContainerAllocator& _alloc)
    : rpy(_alloc)
    , duration(0.0)  {
  (void)_alloc;
    }



   typedef  ::jethexa_controller_interfaces::Euler_<ContainerAllocator>  _rpy_type;
  _rpy_type rpy;

   typedef double _duration_type;
  _duration_type duration;





  typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> const> ConstPtr;

}; // struct SetHead_

typedef ::jethexa_controller_interfaces::SetHead_<std::allocator<void> > SetHead;

typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetHead > SetHeadPtr;
typedef boost::shared_ptr< ::jethexa_controller_interfaces::SetHead const> SetHeadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator2> & rhs)
{
  return lhs.rpy == rhs.rpy &&
    lhs.duration == rhs.duration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator1> & lhs, const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jethexa_controller_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
{
  static const char* value()
  {
    return "269ab51efb365ba39dc916c41e7ee5e2";
  }

  static const char* value(const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x269ab51efb365ba3ULL;
  static const uint64_t static_value2 = 0x9dc916c41e7ee5e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jethexa_controller_interfaces/SetHead";
  }

  static const char* value(const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Euler rpy\n"
"float64 duration\n"
"\n"
"\n"
"================================================================================\n"
"MSG: jethexa_controller_interfaces/Euler\n"
"float64 roll\n"
"float64 pitch\n"
"float64 yaw\n"
;
  }

  static const char* value(const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rpy);
      stream.next(m.duration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetHead_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jethexa_controller_interfaces::SetHead_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jethexa_controller_interfaces::SetHead_<ContainerAllocator>& v)
  {
    s << indent << "rpy: ";
    s << std::endl;
    Printer< ::jethexa_controller_interfaces::Euler_<ContainerAllocator> >::stream(s, indent + "  ", v.rpy);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETHEXA_CONTROLLER_INTERFACES_MESSAGE_SETHEAD_H
